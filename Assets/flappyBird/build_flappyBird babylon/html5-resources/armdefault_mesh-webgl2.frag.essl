#version 300 es
precision mediump float;
precision highp int;

uniform highp vec4 shirr[7];
uniform highp vec3 sunDir;
uniform highp sampler2D shadowMap;
uniform highp float shadowsBias;
uniform highp vec3 sunCol;
uniform highp vec3 pointPos;
uniform highp vec2 lightProj;
uniform highp float pointBias;
uniform highp samplerCube shadowMapPoint[1];
uniform highp vec3 pointCol;
uniform highp float envmapStrength;

in highp vec3 wnormal;
in highp vec4 lightPosition;
in highp vec3 wposition;
out highp vec4 fragColor;

highp float lpToDepth(inout highp vec3 lp, highp vec2 lightProj_1)
{
    lp = abs(lp);
    highp float zcomp = max(lp.x, max(lp.y, lp.z));
    zcomp = lightProj_1.x - (lightProj_1.y / zcomp);
    return (zcomp * 0.5) + 0.5;
}

highp float attenuate(highp float dist)
{
    return 1.0 / (dist * dist);
}

highp vec3 shIrradiance(highp vec3 nor)
{
    highp vec3 cl00 = vec3(shirr[0].x, shirr[0].y, shirr[0].z);
    highp vec3 cl1m1 = vec3(shirr[0].w, shirr[1].x, shirr[1].y);
    highp vec3 cl10 = vec3(shirr[1].z, shirr[1].w, shirr[2].x);
    highp vec3 cl11 = vec3(shirr[2].y, shirr[2].z, shirr[2].w);
    highp vec3 cl2m2 = vec3(shirr[3].x, shirr[3].y, shirr[3].z);
    highp vec3 cl2m1 = vec3(shirr[3].w, shirr[4].x, shirr[4].y);
    highp vec3 cl20 = vec3(shirr[4].z, shirr[4].w, shirr[5].x);
    highp vec3 cl21 = vec3(shirr[5].y, shirr[5].z, shirr[5].w);
    highp vec3 cl22 = vec3(shirr[6].x, shirr[6].y, shirr[6].z);
    return ((((((((((cl22 * 0.429042994976043701171875) * ((nor.y * nor.y) - ((-nor.z) * (-nor.z)))) + (((cl20 * 0.743125021457672119140625) * nor.x) * nor.x)) + (cl00 * 0.88622701168060302734375)) - (cl20 * 0.2477079927921295166015625)) + (((cl2m2 * 0.85808598995208740234375) * nor.y) * (-nor.z))) + (((cl21 * 0.85808598995208740234375) * nor.y) * nor.x)) + (((cl2m1 * 0.85808598995208740234375) * (-nor.z)) * nor.x)) + ((cl11 * 1.02332794666290283203125) * nor.y)) + ((cl1m1 * 1.02332794666290283203125) * (-nor.z))) + ((cl10 * 1.02332794666290283203125) * nor.x);
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec3 basecol = vec3(0.800000011920928955078125);
    highp float roughness = 0.25;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 0.5;
    highp vec3 direct = vec3(0.0);
    highp float svisibility = 1.0;
    highp float sdotNL = max(dot(n, sunDir), 0.0);
    if (lightPosition.w > 0.0)
    {
        highp vec3 lPos = lightPosition.xyz / vec3(lightPosition.w);
        svisibility = float(texture(shadowMap, vec2(lPos.xy)).x > (lPos.z - shadowsBias));
    }
    direct += (((basecol * sdotNL) * sunCol) * svisibility);
    highp float visibility = 1.0;
    highp vec3 ld = pointPos - wposition;
    highp vec3 l = normalize(ld);
    highp float dotNL = max(dot(n, l), 0.0);
    highp vec3 param = ld;
    highp float _304 = lpToDepth(param, lightProj);
    highp float compare = _304 - (pointBias * 1.5);
    visibility = float(texture(shadowMapPoint[0], vec3((-l) + ((n * pointBias) * 20.0))).x > compare);
    direct += ((((basecol * dotNL) * pointCol) * attenuate(distance(wposition, pointPos))) * visibility);
    fragColor = vec4(direct + ((basecol * shIrradiance(n)) * envmapStrength), 1.0);
    highp vec3 _369 = pow(fragColor.xyz, vec3(0.4545454680919647216796875));
    fragColor = vec4(_369.x, _369.y, _369.z, fragColor.w);
}

